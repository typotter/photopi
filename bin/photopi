#!/usr/bin/env python
"""
Usage: photopi bark [options] [-v ...]
       photopi timelapse load --device=<device> [ --label=<label>, --base=<base_dir>, --remote=<remote_dir>]
       photopi server --port=<port>
       photopi remote --host=<host> --port=<port>
       photopi raspistill test [--base=<base_dir>]
       photopi raspistill tl [--label=<label>, --base=<base_dir>, --interval=<interval>, --timeout=<timeout>]

Options:
 --config=file    Specify a path to configuration instead of defaults
 -v                         Include verbose logging. Multiple v's adds verbosity
 -h, --help         Print help


"""
from docopt import docopt
import sys, time, logging

import photopi.raspistill.module
import photopi.timelapse.module
import photopi.server.module
import photopi.client.module

def setup_logging(root_verbose=False, photopi_verbose=False):
    logging.captureWarnings(True)
    logging.getLogger().setLevel(logging.WARN)
    if root_verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    logging.getLogger('photopi').setLevel(logging.INFO)
    if photopi_verbose:
        logging.getLogger('photopi').setLevel(logging.DEBUG)

def do_bark(args):
    print("Bark")
    from subprocess import call
    call(["echo \"bark\""], shell=True)

MAINMODS = {
    "raspistill": photopi.raspistill.module.get_module,
    "remote": photopi.client.module.get_module,
    "server": photopi.server.module.get_module,
    "timelapse": photopi.timelapse.module.get_module}

def main():
    args = docopt(__doc__)
    if args['-v']:
        if args['-v'] > 1:
            setup_logging(True, True)
        else:
            setup_logging(False, True)
    else:
        setup_logging()

    if args['bark']:
        return do_bark(args)

    # Try modules
    for modcmd, injector in MAINMODS.items():
        if args[modcmd]:
            return injector().main(args)

    return False

if __name__ == '__main__':
        logging.basicConfig()
        if main():
                sys.exit(0)
        sys.exit(1)
