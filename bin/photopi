#!/usr/bin/env python
"""
Usage: photopi run [options] [-v ...]
       photopi bundle ls [options] [-v ...]
       photopi help

Options:
 --config=file  Specify a path to configuration instead of defaults
 -v             Include verbose logging. Repeating v adds verbosity
 -h, --help     Print help
 --node=node    Limit the listing to files on one node

"""

import logging
import sys
import signal
import time

import docopt

from photopi.core.config import Configuration

import photopi.bundle.module

def setup_logging(root_verbose=False, app_verbose=False):
    """ Configure logging levels. """
    logging.captureWarnings(True)
    logging.getLogger().setLevel(logging.WARN)
    if root_verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    logging.getLogger('photopi').setLevel(logging.INFO)
    if app_verbose:
        logging.getLogger('photopi').setLevel(logging.DEBUG)

def do_run(args):
    """ Run loop. """
    log = logging.getLogger('photopi.cli.run')

    stopping = False
    def signal_handler(_, __):
        """ Sets the stop flag to true so the loop exits. """
        log.info("Stopping tasks")
        stopping = True

        log.info("Closing. Thank you for using photopi")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    while not stopping:
        config = Configuration(config_path=args['--config'])
        log.info(config)
        time.sleep(30)

    signal.pause()
    log.info("Shutdown complete")
    return True

MAINMODS = [photopi.bundle.module.MODULE]

def main():
    """ Main routine for the application. """
    args = docopt.docopt(__doc__)
    if args['-v']:
        if args['-v'] > 1:
            setup_logging(True, True)
        else:
            setup_logging(False, True)
    else:
        setup_logging()
    if args['run']:
        return do_run(args)

    config = Configuration(config_path=args['--config'])
    log = logging.getLogger('photopi.main')

    # Try modules
    for modcmd, injector in MAINMODS:
        if args[modcmd]:
            log.info("Running %s module", modcmd)
            return injector().main(args, config)

    return False

if __name__ == '__main__':
    logging.basicConfig()
    if main():
        sys.exit(0)
    sys.exit(1)
